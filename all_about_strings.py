# Data types or Data structures in python...
# 1.) Strings
# 2.) list
# 3.) Dictionaries
# These are super-flexible.

# String: these are the data types in python

name="mohit"            # This is one kind of String...
color='pink'            # This is second kind of String...
place='''India'''       # This is third kind of string...

# can add strings using "+" symbol...
print("I am "+name+" from "+place)              # Concatination

# Multiply the contents of the string...
print("Programmer-"*3)

# To find the length of the string...
length_of_place=len(place)
print("No. of character in place:",length_of_place)

# The concept of string indexing...
country="india"             # This becomes an array in the python starting from 0 to n-1...
print(country[2])           # This will give "d" as the output...
print(country[4])           # will print last alphabet of str country i.e. "a"
# print(country[5])         # this gives an index error, since max index in country is 4 i.e.n-1...

# Negative index is also permitted in this...
print(country[-1])          # will give 1st from last...i.e. a

# "Slice" of the string: Portion of the string that can contain more than one chararter...
# also called "substring"...
# Now we need a range...
print(country[1:3])          # india is the string, "nd" output...

# The slicing takes place from 1 to 2 of [1:3]...

print(country[:3])            # by default starts from 0...
print(country[3:])            # by default ends at the last...
#print(country[:"d"])

# Individual assignment in the strings is not allowed...
# e.g. is...
string="I want to be best programmer in this world..."
print(string)
# string[2]="c"     # This is an type error string does not suppport assignment...

# Strings in python are "immutable" i.e they can't be modified...
# New string using the old can be created...
# new_string=string[0:2]+"c"+string[3:]         # this is right no error...

new_string="U"+string[1:]
print(new_string)

# A method is function associated with a specific class...
string.index("b")               # This is the method to find the index of any "char" in a string...
print(string.index("b"))

# In case of a multiple "same" char in a string, it returns the index of the first among them...
string.index("t")
print(string.index("t"))

# It even returns the index of any sub-string...
print(string.index("best"))

# If any char searched that is not there in string, then this will report a value-error..

# We can directly check if any substring is present in a string or not...
# the keyword "in" is used for this purpose...
print("best" in string)         # True is the output means its present...

# Various other methods in the python language...
print("discipline".upper())
print("DISCIPLINE".lower())
# These are often very usefull when we take an input from the user and sometimes the enter in mixed case type...

# sometimes the user enter the surrounding spaces with the answer that they input..
# like...for name the input string is..."  Mukesh   "...
# this has unrequired spaces in front and in back...we use strip() to remove this...
print("  Mukesh   ")
print("  Mukesh   ".strip())
print("  Mukesh   ".lstrip())
print("  Mukesh   ".rstrip())

# Another Method named as "count()"...
print("The number of times the var 't' in string is:")
print(string.count("t"))

# endswith()...
print(string.endswith("..."))

# isnumeric()...
print("name".isnumeric())           # False
print("1234".isnumeric())           # True

int("1234")         # makes this string an integer value...

# "join()" method...this joins the strings with the "str" given first, like "..." below...
print("...".join(["This","is","a","check"]))

# we can even split() a string...as...
print(string.split())       # This string method returns "a list of all the words" in the initial string...
                            # and automatically splits that by white space...

# numbers can't directly be concatinated to strings so we explicitly convert them to "int"...
varx=100
print("The maximum marks are:",varx)        # This is allowed...one space automatically comes after comma...note.
#print("The maximum marks are:"+varx)       # This concatination is not allowed...
print("The maximum marks are:"+str(varx))   # This is fine again...

# Format specifier that we had in C are also present here, in a diff way...
# format() method...
job="programmer"
serial_no=1234
print("Hello {} your serial no. is {}".format(job,serial_no))
# Here, job and serial_no format is not required only...
# The curly brackets are always empty.

# We can go a unique way too, no need to remember the sequence of format then...
print("Hello {job} your serial no. is {serial_no}".format(serial_no=serial_no,job=job))
# In this case we need to assign the values to the format there itself..

# we can restrict the values of the digits after decimal accr to our wish using format()...
# Formatting expression...
grade=9.89
basic_salary=54384
total_pay=basic_salary+(basic_salary*grade*0.01)  # answer Rs.5378.5776+Rs.54384=Rs.59762.5776
print("Basic salary: Rs.{:.2f}, Total salary: Rs.{:.2f}".format(basic_salary,total_pay))
# We recieve a truncated float value that contains 2 decimal values...
print("Basic salary: Rs.{:>3.2f}, Total salary: Rs.{:>.2f}".format(basic_salary,total_pay))
# This ">" operator is generally used to align text to the right ...
# so that the output is neatly aligned...
# used in loops when we have much data that's much prone to scattering of the data.
# {:>3.2f} this means 3 spaces of alignment at right side, and 2 deciaml places after formatting.
# {:<3.2f} this means 3 spaces of alignment at left side, and 2 deciaml places after formatting.

old="hey"               # The below script replaces a sentence ending word by some other sentence...
new="champ"
sentence="I am fine how are you hey"
print(sentence)
if sentence.endswith(old):
   leng1=len(sentence)
   leng2=len(old)
   new_sentence=sentence[0:leng1-leng2] + new
   print(new_sentence)



