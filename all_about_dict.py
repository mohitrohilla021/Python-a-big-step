# Dictionaries...another tyoe of the data type...
# like lists, these are used to organise elements into collections...
# unlike list, we don't access elements using their positions...
# the data inside dictionaries take the form of pairs of keys and values...
# to get a "dict value" we use its corresponding "key"...
# in a list the index must be a number, in dict, we can use a bunch of diff data types as keys...
# As in the common language dictionary, in python dict comes in the same way,
# here, the word-key and the definition-value...

dict1={}

#example...

file_count={"jpg":10,"txt":14,"csv":2,"py":23}      # "jpg",etc are the keys and the integer are the values...
print(file_count)
print(file_count["txt"])

# use of "in" keyword...
print("jpg" in file_count)              # its true since value exist in the dict...

# dictionaries are mutable...
# this means we can add, remove and modify the elements...

#add
file_count["cfg"]=8
print(file_count)

# what is we add a key that already exist in the dict...
file_count["csv"]=17                 # the previous value gets replaced by this new value...
print(file_count)

# what if the same key is given multiple values...
file_count["html"]=17               # multiple keys can have the same value, but key remains only one...
print(file_count)

# delete an element...
print("The previous dict:",file_count)
del file_count["cfg"]
print("The new dict:",file_count)

# iterate over the content of dict...
for extn in file_count:
    print(extn)                             # the keys will be displayed...

# we can use the "tuple" to return the value of the values with its keys...
# items() method...to get key-value pairs...
for extn, amount in file_count.items():
    print("there are {} files with the .{} extension".format(amount,extn))

# keys() and values() methods...
print(file_count.keys())
print(file_count.values())

# iteration can directly follow with values also...
for value in file_count.values():
    print(value)

# dict v/s list...
# thing about the kind of information we need to represent...
# if we wanted to save the IP Addresses that access the server then we would like to have a list for it...
# if we have a list of host names and their addresses, then we can pair then in a "dict"...

# if we have to check for a value in the items of 10000 then its too quick in the dict...
# whereas, in the case of list it takes a lot of time to traverse 10000 items...
# when we "search for a specific element"...

# in list we can store any data types...
# in dict we can store any data types for the values... but the keys are restricted to certain data types...
# we can use any "immutable data types" for the keys in dict, like, numbers, booleans, strings, tuples...
# lists and dict can not be used as the dict keys since they are mutable...

# some other data types are also present, like...
# e.g. set,
# used to store bunch of elements and be certain that they are only "present once"...
# elements of set must also be immutable...
# they are like, "keys of the dict with no associated values"...
# in the case of sets...
# order of element in the list doesn't matter, but what matters is the element is there in the list or not...



