# Debugging, the duty of a programmer...

# syntax error
# similar to a normal grammar error

# print("hello world"               #   This is a syntax error
# Paranthesis can also be places in any line below this print statement line

print("hello world"
)                                   # The also works fines...

# Runtime error
# the errors that are during the execution of the program like...
# zero division error...
# print("The answer is:",1/0)

# Semantic errors
# The py interpretor is "able to run" the code, but actually produces the undesirable output.
# print("One half of the percentage is:",1/2)       # This produces a semantic error
print("One half of the percentage is:",100/2)

# You should know how to find your errors, its very crutial for a programmer...
# Read the line no. from the error description, then read the type of the error...
# Then correct the error.
# If the error is in line no. 10(just an example), then it means...
# interpretor has prperly executed the the lines above it, i.e. till line no. 9 no problem.

# The most basic forms of the mistakes that are commonly found in the programming are:
# "Syntax error", where we forget the Paranthesis at the end of the statement.
# "Name error", where we forget the correct name and write wrong in its place...
# or also seen sometimes when we use the variable before its declaration.
# The codes are "case sensitive" please take care of using same names...
# sometimes capital or smaller creates a confusion.

# "Type error", when the range of for loop is given 0 argument...
# atleast 1 argument is needed for this.

# Variable declaration:
# It can not have keywords...
# It can contain alphabets, digits and underscore...
# But it shouln't start from digit like, "1_value" is an invalid variable name...

print(8+7.5)    # here also we are adding 2 different data types...
                # but py automatically converts 8 to 8.0 i.e both float type then, this is "implicit conversion"
